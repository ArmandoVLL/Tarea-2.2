# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tc-8DcPiqM2ezE6Boc8s1ifd1lB_MImB
"""

"""   Autor:
   Armando Augusto Vallaraes Uc
   Contacto: valladaresarmando301@gmail.com
   Versión 2.0 : 14/02/2025 09:30pm
"""
import numpy as np
import matplotlib.pyplot as plt

# Definir la función iterativa g(x) utilizada en el método de punto fijo

def g(x):
    # Definir la ecuación específica según el ejercicio
    # Opción 1
    # return (3*x-1)**(1/2)  # Transformación para resolver x^2 - 3x + 1 = 0
    # Opción 2
    return np.exp(x)/4  # Transformación para x = ln(4x)
    # Opción 3
    # return np.cos(x)  # Transformación para x = cos(x)

# Derivada de g(x) para analizar convergencia

def g_prime(x):
    # Derivadas correspondientes a cada opción
    # Opción 1
    # return (3/2) * (3*x - 1)**(-1/2)
    # Opción 2
    return np.exp(x)/4  # Derivada de e^x / 4
    # Opción 3
    # return -np.sin(x)  # Derivada de cos(x)

# Cálculo de errores

def error_absoluto(x_new, x_old):
    return abs(x_new - x_old)

def error_relativo(x_new, x_old):
    return abs((x_new - x_old) / x_new)

def error_cuadratico(x_new, x_old):
    return (x_new - x_old)**2

# Implementación del método de punto fijo

def punto_fijo(x0, tol=1e-5, max_iter=100):
    iteraciones = []
    errores_abs = []
    errores_rel = []
    errores_cuad = []

    x_old = x0  # Valor inicial
    for i in range(max_iter):
        x_new = g(x_old)  # Aplicación de la función iterativa
        e_abs = error_absoluto(x_new, x_old)
        e_rel = error_relativo(x_new, x_old)
        e_cuad = error_cuadratico(x_new, x_old)

        iteraciones.append((i+1, x_new, e_abs, e_rel, e_cuad))
        errores_abs.append(e_abs)
        errores_rel.append(e_rel)
        errores_cuad.append(e_cuad)

        if e_abs < tol:  # Verificación del criterio de convergencia
            break

        x_old = x_new  # Actualización de la estimación

    return iteraciones, errores_abs, errores_rel, errores_cuad

# Parámetro de inicio para cada caso
# x0 = 1.5  # Caso 1
x0 = 1.0    # Caso 2
# x0 = 0.5  # Caso 3

iteraciones, errores_abs, errores_rel, errores_cuad = punto_fijo(x0)

# Mostrar resultados en forma de tabla
print("Iteración | x_n      | Error absoluto | Error relativo | Error cuadrático")
print("-----------------------------------------------------------------------")
for it in iteraciones:
    print(f"{it[0]:9d} | {it[1]:.6f} | {it[2]:.6e} | {it[3]:.6e} | {it[4]:.6e}")

# Gráfica de la función y la convergencia del método
x_vals = np.linspace(-1, 3, 100)
y_vals = g(x_vals)

plt.figure(figsize=(8, 5))
# Seleccionar la ecuación correspondiente
# plt.plot(x_vals, y_vals, label=r"$(3x-1)^{-1/2}$", color="blue")  # Caso 1
plt.plot(x_vals, y_vals, label=r"$\frac{e^x}{4}$", color="blue")  # Caso 2
# plt.plot(x_vals, y_vals, label=r"$cos(x)$", color="blue")  # Caso 3

plt.plot(x_vals, x_vals, linestyle="dashed", color="red", label="y = x")

# Graficar iteraciones
x_points = [it[1] for it in iteraciones]
y_points = [g(x) for x in x_points]
plt.scatter(x_points, y_points, color="black", zorder=3)
plt.plot(x_points, y_points, linestyle="dotted", color="black", label="Iteraciones")

plt.xlabel("x")
plt.ylabel("g(x)")
plt.legend()
plt.grid(True)
plt.title("Método de Punto Fijo")
plt.savefig("punto_fijo_convergencia.png")
plt.show()

# Gráfica de errores en escala logarítmica
plt.figure(figsize=(8, 5))
plt.plot(range(1, len(errores_abs) + 1), errores_abs, marker="o", label="Error absoluto")
plt.plot(range(1, len(errores_rel) + 1), errores_rel, marker="s", label="Error relativo")
plt.plot(range(1, len(errores_cuad) + 1), errores_cuad, marker="^", label="Error cuadrático")

plt.xlabel("Iteración")
plt.ylabel("Error")
plt.yscale("log")  # Escala logarítmica para mejor visualización
plt.legend()
plt.grid(True)
plt.title("Evolución de los Errores")
plt.savefig("errores_punto_fijo.png")
plt.show()